package ${packagePath}.service;

import com.github.pagehelper.Page;
import com.github.pagehelper.PageHelper;
import ${packagePath}.util.PageResult;
import ${packagePath}.service.${upperClassName}Service;
import ${packagePath}.mapper.${upperClassName}Mapper;
import ${packagePath}.entity.${upperClassName};
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import lombok.extern.slf4j.Slf4j;

import java.util.List;

/**
 * @author ${author}
 * @since ${since}
 */
@Service
#if (${needLombok})
@Slf4j
#end
public class ${upperClassName}ServiceImpl implements ${upperClassName}Service{

    @Autowired
    private ${upperClassName}Mapper ${lowClassName}Mapper;
#if (${methods.findPage.enabled})

    @Override
    public PageResult<${upperClassName}> ${methods.findPage.name}(${upperClassName} params) {
        Page<${upperClassName}> page = PageHelper.startPage(params);
        List<${upperClassName}> list = ${lowClassName}Mapper.${methods.findPage.name}(params);
        PageResult<${upperClassName}> pageResult = new PageResult<>();
        pageResult.setContent(list);
        pageResult.setTotalElements(page.getTotal());
        return pageResult;
    }
#end
#if (${methods.findList.enabled})

    @Override
    public List<${upperClassName}> ${methods.findList.name}() {
        return ${lowClassName}Mapper.${methods.findList.name}();
    }
#end
#if (${methods.findById.enabled})

    @Override
    public ${upperClassName} ${methods.findById.name}(String id) {
        return ${lowClassName}Mapper.${methods.findById.name}(id);
    }
#end
#if (${methods.save.enabled})

    @Override
    public int ${methods.save.name}(${upperClassName} ${lowClassName}) {
        return ${lowClassName}Mapper.${methods.save.name}(${lowClassName});
    }
#end
#if (${methods.update.enabled})

    @Override
    public int ${methods.update.name}(${upperClassName} ${lowClassName}) {
        return ${lowClassName}Mapper.${methods.update.name}(${lowClassName});
    }
#end
#if (${methods.delete.enabled})

    @Override
    public int ${methods.delete.name}(Long id) {
        return ${lowClassName}Mapper.${methods.delete.name}(id);
    }
#end

}